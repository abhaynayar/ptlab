0ca2d12c-37f5-4292-a8b6-6a015bb52161


Introduction

This course details how to perform a Person-in-the-Middle attack against a client performing an HTTP connection over TLS. Knowing how to perform this type of attacks is critical when performing mobile applications and thick clients testing. This exercise highlights one of the most common issues with TLS connection.
The exercise

Like with the first exercise, you have control over the client's DNS resolution. Using this you will be able to lie and tell the client to go to your server instead of the legitimate one. If you manage to get access to the request's content, you finished this exercise.

This exercise is divided in two steps:

    Setting up a DNS server like you did in the first exercise of this badge.
    Setting up a TCP server with TLS support.

This is an introduction to more complex exercises that will go into details on how to intercept TLS connection.
Setting up a DNS server

For this part, you can just follow the steps highlighted in the first exercise on MITM. The only thing that changed is the hostname used by the client.
TLS verification

As part of a request sent over TLS, before sending the request, the client will make sure that:

    The certificate is valid.
    The certificate matches the hostname it's visiting.

For example, if you bind the same socat from the previous exercise (using the self-signed certificate):

$ sudo socat openssl-listen:443,reuseaddr,fork,cert=$FILENAME.pem,cafile=$FILENAME.crt,verify=0 -

The connection will fail if you connect using the following ruby code:

require 'socket'
require 'openssl'
socket = TCPSocket.new('localhost',  443)
ssl_context = OpenSSL::SSL::SSLContext.new
ssl_context.ca_file = '/usr/local/etc/openssl/cert.pem'
ssl_context.verify_mode =  OpenSSL::SSL::VERIFY_PEER
socket = OpenSSL::SSL::SSLSocket.new(socket, ssl_context)
socket.connect
socket.write("TEST")

Since the certificate is self-signed, Ruby will reject it:

% sudo socat openssl-listen:443,reuseaddr,fork,cert=$FILENAME.pem,cafile=$FILENAME.crt,verify=0 -
2016/01/19 21:02:19 socat[65904] E SSL_accept(): error:14094418:SSL routines:SSL3_READ_BYTES:tlsv1 alert unknown ca

However, if you use a valid certificate (as in issued by a CA that is trusted by the client):

% sudo socat openssl-listen:443,reuseaddr,fork,cert=hackingwithpentesterlab.link.crt,cafile=GandiStandardSSLCA2.pem,key=hackingwithpentesterlab.link.key,verify=0 -  

To complete this exercise, you can access a valid certificate and its' private key here.

The application will send the message to the server:

% sudo socat openssl-listen:443,reuseaddr,fork,cert=hackingwithpentesterlab.link.crt,cafile=GandiStandardSSLCA2.pem,key=hackingwithpentesterlab.link.key,verify=0 -
TEST

Be careful! For some weird reasons, the ".crt" file is renamed to ".cer" when you download it with some browsers.

In this example, the application does not perform any validation to ensure that the hostname used by the TCP connection matches the hostname in the Subject of the certificate. Therefore, any certificate issues by a valid CA will allow you to bypass the TLS checks. The cost to get a certificate is insignificant nowadays as they are given for free with no domain.
Here the option cafile=GandiStandardSSLCA2.pem is given to `socat` to ensure that `socat` will present the full chain of certificates to the client as the client may not have Gandi's certificate in their trusted store.
Conclusion

This exercise showed you how you can intercept a TLS connection from a client that does not properly check the hostname against the certificate's subject. It's a pretty common issue when testing mobile applications and thick clients as not every developer will take the time to test this behaviour using a valid certificate (or by adding their own CA to the keystore and creating a certificate with a different hostname). I hope you enjoyed learning with PentesterLab.