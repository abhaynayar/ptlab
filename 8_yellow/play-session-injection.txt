
STUFF I DID

cookie PLAY_SESSION has two parts:
c6222b4830dc0f52024f1b0211b6e089b648cc14-___AT:e1e59b1e034bdd6ff1d28097434de4f1f90770ca

the body contains authenticityToken, username, password
authenticityToken=e1e59b1e034bdd6ff1d28097434de4f1f90770ca

after logging out, PLAY_SESSION:
c6222b4830dc0f52024f1b0211b6e089b648cc14-___AT:e1e59b1e034bdd6ff1d28097434de4f1f90770ca

the end of the cookie has a null byte (which I have removed here)

https://www.playframework.com/security/vulnerability/20130806-SessionInjection


aecb58a4a1f6a043c40debd9deca0d6b41d5f7cc-%00
___AT:85fb382f0a73a36b69be527e511a0c8327213024%00


SOLUTION

while registering, add %00%00admin:1%00%00 in front of user variable
get the session returned by the server and inject it while opening root





WHITE BOX

https://github.com/playframework/play1/blob/1.2.5/framework/src/play/mvc/Scope.java

if (cookie != null && Play.started && cookie.value != null && !cookie.value.trim().equals("")) {
	String value = cookie.value;
	int firstDashIndex = value.indexOf("-");
	if(firstDashIndex > -1) {
	String sign = value.substring(0, firstDashIndex);
	String data = value.substring(firstDashIndex + 1);
	if (sign.equals(Crypto.sign(data, Play.secretKey.getBytes()))) {
		String sessionData = URLDecoder.decode(data, "utf-8");
		Matcher matcher = sessionParser.matcher(sessionData);
		while (matcher.find()) {
			session.put(matcher.group(1), matcher.group(2));
		}
	}
}

The `Play.secretKey` is stored in `conf/application.conf`, if you can get access to this file (for example using a directory traversal), you will be able to forge sessions.

the code in Scope.java used a non time-constant string comparison:

  if (sign.equals(Crypto.sign(data, Play.secretKey.getBytes()))) {



https://github.com/playframework/play1/blob/1.2.5/framework/src/play/libs/Crypto.java

public static String sign(String message, byte[] key) {
 if (key.length == 0) {
     return message;
 }

 try {
     Mac mac = Mac.getInstance("HmacSHA1");

https://en.wikipedia.org/wiki/Length_extension_attack


once the signature is verified, Play parses the session's data using the following mechanism:

static Pattern sessionParser = Pattern.compile("\u0000([^:]*):([^\u0000]*)\u0000");
[...]
  Matcher matcher = sessionParser.matcher(sessionData);
  while (matcher.find()) {
      session.put(matcher.group(1), matcher.group(2));
  }

most frameworks rely on known formats (like YAML, JSON, object serialisation) to store session's information.
here the data is only splitted using a regular expression and a loop.


how information is added to the server side session:

public void put(String key, String value) {
  if (key.contains(":")) {
    throw new IllegalArgumentException("Character ':' is invalid in a session key.");
  }
  change();
  if (value == null) {
     data.remove(key);
  } else {
     data.put(key, value);
  }
}








BLACK BOX

Think of most injection problems as:
delimiter1	keyword1	delimiter2	data1	delimiter3
delimiter1	keyword2	delimiter2	data2	delimiter3

If you have control over data1 and/or data2, you need to try to inject the various delimiters and keywords to see if you can trigger unexpected behavior.






