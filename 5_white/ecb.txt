how do we get to know its ecb ??

if you log in many times and always get the same cookie, there is probably something wrong in the application. the cookie sent back should be unique each time you log in. if the cookie is always the same, it will probably always be valid and there won't be anyway to invalidate it.


qwerty:qwerty	kCl4un4R1lLvurMkvC0r3Q==	90	29	78	ba	7e	11	d6	52	ef	ba	b3	24	bc	2d	2b	dd
test1:asdf		3vsoqandbzr3loqv24rava==	dd	5b	0e	a8	03	5d	05	9a	f7	2c	e4	15	db	84	40	54
test2:asdf		vbsuisdlkkv3loqv24rava==	bd	bb	2e	8a	c7	65	92	4b	f7	96	8a	af	db	8a	da	bd
test:test		7z+Gu21W2Yi91LAZ1eB8zQ==	ef	3f	86	bb	6d	56	d9	88	bd	d4	b0	19	d5	e0	7c	cd
tes:tes			W/foRRh3MWQ=				5b	f7	e8	45	18	77	31	64	--	--	--	--	--	--	--	--
a:a				0XiRxYxxrCo=				d1	78	91	c5	8c	71	ac	2a	--	--	--	--	--	--	--	--


we can see that the size of the decoded cookie goes from 8 to 16 bytes when the length of the username+password is greater than 7. we can infer from this value that the delimiter is a single byte since the encryption is done per block of 8 bytes.


this user already exists:
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa


works:
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa:1
9KG7Vr4LWlr0obtWvgtaWvShu1a+C1pa9KG7Vr4LWlr0obtWvgtaWvShu1a+C1pakxk03hbupZs=

f4	a1	bb	56	be	0b	5a	5a	f4	a1	bb	56	be	0b	5a	5a
f4	a1	bb	56	be	0b	5a	5a	f4	a1	bb	56	be	0b	5a	5a
f4	a1	bb	56	be	0b	5a	5a	f4	a1	bb	56	be	0b	5a	5a
93	19	34	de	16	ee	a5	9b	--	--	--	--	--	--	--	--


aaaaaaaaaaaaadmin:a
f4	a1	bb	56	be	0b	5a	5a	4e	ce	f1	9e	ae	5f	a1	0d
9f	67	b9	e6	02	40	bb	80	--	--	--	--	--	--	--	--


this example is using a weak encryption mechanism and it's likely that real life examples will use bigger block size.

if you can find what delimiter is used (or brute force it), you can try to create a user with a username that contains the delimiter (for example the username "admin:"). using this method, you may be able to get logged in as admin. this web application prevents this type of attack.

the easiest way to get admin access is to remove some of the encrypted data. we know that the application uses the following format:

\[username\]:\[separator\]

and only uses the username when the cookie is sent back to the application

we also know that each block of 8 bytes is completely independant (ECB)

to exploit this issue, we can create a username that contains 8 characters followed by the word admin:

aaaaaaaaadmin:a
f4	a1	bb	56	be	0b	5a	5a	bd	1a	a7	e4	5d	95	52	b9


ruby:

% irb
> require 'base64' ; require 'uri'
 => true
> Base64.decode64(URI.decode("OR9hcp18%2BC1bChK10NlRRg%3d%3d"))
 => "9\x1Far\x9D|\xF8-[\n\x12\xB5\xD0\xD9QF"


python:

>>> a = 'bd1aa7e45d9552b9'
>>> a.decode("hex")
'\xbd\x1a\xa7\xe4]\x95R\xb9'
>>> a.decode("hex").encode("base64")
'vRqn5F2VUrk=\n'
>>>



